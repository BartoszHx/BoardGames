// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BoardGamesGrpc/protos/game_online.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BoardGamesGrpc.GameOnlines {

  /// <summary>Holder for reflection information generated from BoardGamesGrpc/protos/game_online.proto</summary>
  public static partial class GameOnlineReflection {

    #region Descriptor
    /// <summary>File descriptor for BoardGamesGrpc/protos/game_online.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameOnlineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidCb2FyZEdhbWVzR3JwYy9wcm90b3MvZ2FtZV9vbmxpbmUucHJvdG8SGkJv",
            "YXJkR2FtZXNHcnBjLkdhbWVPbmxpbmVzGihCb2FyZEdhbWVzR3JwYy9wcm90",
            "b3Mvc2hhcmVkX21vZGVsLnByb3RvIjkKFVNlYXJjaE9wcG9uZW50UmVxdWVz",
            "dBIOCgZVc2VySWQYASABKAUSEAoIR2FtZVR5cGUYAiABKAUihgEKFVNlYXJj",
            "aE9wcG9uZW50UmVzcG9ucxI7CgdSZXNwb25zGAEgASgLMiouQm9hcmRHYW1l",
            "c0dycGMuU2hhcmVkTW9kZWwuU2VydmVyUmVzcG9uc2USMAoFTWF0Y2gYAiAB",
            "KAsyIS5Cb2FyZEdhbWVzR3JwYy5HYW1lT25saW5lcy5NYXRjaCItChtDYW5j",
            "ZWxTZWFyY2hPcHBvbmVudFJlcXVlc3QSDgoGVXNlcklkGAEgASgFIloKG0Nh",
            "bmNlbFNlYXJjaE9wcG9uZW50UmVzcG9ucxI7CgdSZXNwb25zGAEgASgLMiou",
            "Qm9hcmRHYW1lc0dycGMuU2hhcmVkTW9kZWwuU2VydmVyUmVzcG9uc2UiMQoG",
            "UGxheWVyEgoKAklEGAEgASgFEgwKBE5hbWUYAiABKAkSDQoFQ29sb3IYAyAB",
            "KAUiIwoEUGF3bhINCgVDb2xvchgBIAEoBRIMCgRUeXBlGAIgASgFIlUKBUZp",
            "ZWxkEg0KBUhlaWdoGAEgASgFEg0KBVdpZHRoGAIgASgFEi4KBFBhd24YAyAB",
            "KAsyIC5Cb2FyZEdhbWVzR3JwYy5HYW1lT25saW5lcy5QYXduIocBCgVCb2Fy",
            "ZBIRCglNYXhIZWlnaHQYASABKAUSEAoITWF4V2lkdGgYAiABKAUSEQoJTWlu",
            "SGVpZ2h0GAMgASgFEhAKCE1pbldpZHRoGAQgASgFEjQKCUZpZWxkTGlzdBgF",
            "IAMoCzIhLkJvYXJkR2FtZXNHcnBjLkdhbWVPbmxpbmVzLkZpZWxkIqABCglN",
            "YXRjaFVzZXISEwoLTWF0Y2hVc2VySWQYASABKAUSDwoHTWF0Y2hJZBgCIAEo",
            "BRIuCgRVc2VyGAMgASgLMiAuQm9hcmRHYW1lc0dycGMuU2hhcmVkTW9kZWwu",
            "VXNlchI9CgtNYXRjaFJlc3VsdBgEIAEoDjIoLkJvYXJkR2FtZXNHcnBjLkdh",
            "bWVPbmxpbmVzLk1hdGNoUmVzdWx0cyKJAQoFTWF0Y2gSDwoHTWF0Y2hJZBgB",
            "IAEoBRIQCghHYW1lVHlwZRgCIAEoBRIRCglEYXRlU3RhcnQYAyABKAkSDwoH",
            "RGF0ZUVuZBgEIAEoCRI5CgpNYXRjaFVzZXJzGAUgAygLMiUuQm9hcmRHYW1l",
            "c0dycGMuR2FtZU9ubGluZXMuTWF0Y2hVc2VyIqgBCgRHYW1lEjYKClBsYXll",
            "clR1cm4YASABKAsyIi5Cb2FyZEdhbWVzR3JwYy5HYW1lT25saW5lcy5QbGF5",
            "ZXISNgoKUGxheWVyTGlzdBgCIAMoCzIiLkJvYXJkR2FtZXNHcnBjLkdhbWVP",
            "bmxpbmVzLlBsYXllchIwCgVCb2FyZBgDIAEoCzIhLkJvYXJkR2FtZXNHcnBj",
            "LkdhbWVPbmxpbmVzLkJvYXJkImwKCEdhbWVQbGF5Ei4KBEdhbWUYASABKAsy",
            "IC5Cb2FyZEdhbWVzR3JwYy5HYW1lT25saW5lcy5HYW1lEjAKBU1hdGNoGAIg",
            "ASgLMiEuQm9hcmRHYW1lc0dycGMuR2FtZU9ubGluZXMuTWF0Y2giWgoQUGxh",
            "eU1hdGNoUmVxdWVzdBIOCgZVc2VySWQYASABKAUSNgoIR2FtZVBsYXkYAiAB",
            "KAsyJC5Cb2FyZEdhbWVzR3JwYy5HYW1lT25saW5lcy5HYW1lUGxheSpXCgxN",
            "YXRjaFJlc3VsdHMSCAoETnVsbBAAEg4KCkluUHJvZ3Jlc3MQARIHCgNXaW4Q",
            "AhIICgRMb3NzEAMSCAoERHJhdxAEEhAKDERpc2Nvbm5lY3RlZBAFMvsCChFH",
            "YW1lT25saW5lU2VydmljZRJ2Cg5TZWFyY2hPcHBvbmVudBIxLkJvYXJkR2Ft",
            "ZXNHcnBjLkdhbWVPbmxpbmVzLlNlYXJjaE9wcG9uZW50UmVxdWVzdBoxLkJv",
            "YXJkR2FtZXNHcnBjLkdhbWVPbmxpbmVzLlNlYXJjaE9wcG9uZW50UmVzcG9u",
            "cxKIAQoUQ2FuY2VsU2VhcmNoT3Bwb25lbnQSNy5Cb2FyZEdhbWVzR3JwYy5H",
            "YW1lT25saW5lcy5DYW5jZWxTZWFyY2hPcHBvbmVudFJlcXVlc3QaNy5Cb2Fy",
            "ZEdhbWVzR3JwYy5HYW1lT25saW5lcy5DYW5jZWxTZWFyY2hPcHBvbmVudFJl",
            "c3BvbnMSYwoJUGxheU1hdGNoEiwuQm9hcmRHYW1lc0dycGMuR2FtZU9ubGlu",
            "ZXMuUGxheU1hdGNoUmVxdWVzdBokLkJvYXJkR2FtZXNHcnBjLkdhbWVPbmxp",
            "bmVzLkdhbWVQbGF5KAEwAUIdqgIaQm9hcmRHYW1lc0dycGMuR2FtZU9ubGlu",
            "ZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BoardGamesGrpc.SharedModel.SharedModelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::BoardGamesGrpc.GameOnlines.MatchResults), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.SearchOpponentRequest), global::BoardGamesGrpc.GameOnlines.SearchOpponentRequest.Parser, new[]{ "UserId", "GameType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.SearchOpponentRespons), global::BoardGamesGrpc.GameOnlines.SearchOpponentRespons.Parser, new[]{ "Respons", "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.CancelSearchOpponentRequest), global::BoardGamesGrpc.GameOnlines.CancelSearchOpponentRequest.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.CancelSearchOpponentRespons), global::BoardGamesGrpc.GameOnlines.CancelSearchOpponentRespons.Parser, new[]{ "Respons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.Player), global::BoardGamesGrpc.GameOnlines.Player.Parser, new[]{ "ID", "Name", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.Pawn), global::BoardGamesGrpc.GameOnlines.Pawn.Parser, new[]{ "Color", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.Field), global::BoardGamesGrpc.GameOnlines.Field.Parser, new[]{ "Heigh", "Width", "Pawn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.Board), global::BoardGamesGrpc.GameOnlines.Board.Parser, new[]{ "MaxHeight", "MaxWidth", "MinHeight", "MinWidth", "FieldList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.MatchUser), global::BoardGamesGrpc.GameOnlines.MatchUser.Parser, new[]{ "MatchUserId", "MatchId", "User", "MatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.Match), global::BoardGamesGrpc.GameOnlines.Match.Parser, new[]{ "MatchId", "GameType", "DateStart", "DateEnd", "MatchUsers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.Game), global::BoardGamesGrpc.GameOnlines.Game.Parser, new[]{ "PlayerTurn", "PlayerList", "Board" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.GamePlay), global::BoardGamesGrpc.GameOnlines.GamePlay.Parser, new[]{ "Game", "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BoardGamesGrpc.GameOnlines.PlayMatchRequest), global::BoardGamesGrpc.GameOnlines.PlayMatchRequest.Parser, new[]{ "UserId", "GamePlay" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MatchResults {
    [pbr::OriginalName("Null")] Null = 0,
    [pbr::OriginalName("InProgress")] InProgress = 1,
    [pbr::OriginalName("Win")] Win = 2,
    [pbr::OriginalName("Loss")] Loss = 3,
    [pbr::OriginalName("Draw")] Draw = 4,
    [pbr::OriginalName("Disconnected")] Disconnected = 5,
  }

  #endregion

  #region Messages
  public sealed partial class SearchOpponentRequest : pb::IMessage<SearchOpponentRequest> {
    private static readonly pb::MessageParser<SearchOpponentRequest> _parser = new pb::MessageParser<SearchOpponentRequest>(() => new SearchOpponentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchOpponentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchOpponentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchOpponentRequest(SearchOpponentRequest other) : this() {
      userId_ = other.userId_;
      gameType_ = other.gameType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchOpponentRequest Clone() {
      return new SearchOpponentRequest(this);
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "GameType" field.</summary>
    public const int GameTypeFieldNumber = 2;
    private int gameType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchOpponentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchOpponentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (GameType != other.GameType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (GameType != 0) hash ^= GameType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (GameType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (GameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchOpponentRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.GameType != 0) {
        GameType = other.GameType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            GameType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchOpponentRespons : pb::IMessage<SearchOpponentRespons> {
    private static readonly pb::MessageParser<SearchOpponentRespons> _parser = new pb::MessageParser<SearchOpponentRespons>(() => new SearchOpponentRespons());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchOpponentRespons> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchOpponentRespons() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchOpponentRespons(SearchOpponentRespons other) : this() {
      respons_ = other.respons_ != null ? other.respons_.Clone() : null;
      match_ = other.match_ != null ? other.match_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchOpponentRespons Clone() {
      return new SearchOpponentRespons(this);
    }

    /// <summary>Field number for the "Respons" field.</summary>
    public const int ResponsFieldNumber = 1;
    private global::BoardGamesGrpc.SharedModel.ServerResponse respons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.SharedModel.ServerResponse Respons {
      get { return respons_; }
      set {
        respons_ = value;
      }
    }

    /// <summary>Field number for the "Match" field.</summary>
    public const int MatchFieldNumber = 2;
    private global::BoardGamesGrpc.GameOnlines.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.GameOnlines.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchOpponentRespons);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchOpponentRespons other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Respons, other.Respons)) return false;
      if (!object.Equals(Match, other.Match)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respons_ != null) hash ^= Respons.GetHashCode();
      if (match_ != null) hash ^= Match.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respons_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Respons);
      }
      if (match_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respons_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Respons);
      }
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchOpponentRespons other) {
      if (other == null) {
        return;
      }
      if (other.respons_ != null) {
        if (respons_ == null) {
          Respons = new global::BoardGamesGrpc.SharedModel.ServerResponse();
        }
        Respons.MergeFrom(other.Respons);
      }
      if (other.match_ != null) {
        if (match_ == null) {
          Match = new global::BoardGamesGrpc.GameOnlines.Match();
        }
        Match.MergeFrom(other.Match);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (respons_ == null) {
              Respons = new global::BoardGamesGrpc.SharedModel.ServerResponse();
            }
            input.ReadMessage(Respons);
            break;
          }
          case 18: {
            if (match_ == null) {
              Match = new global::BoardGamesGrpc.GameOnlines.Match();
            }
            input.ReadMessage(Match);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelSearchOpponentRequest : pb::IMessage<CancelSearchOpponentRequest> {
    private static readonly pb::MessageParser<CancelSearchOpponentRequest> _parser = new pb::MessageParser<CancelSearchOpponentRequest>(() => new CancelSearchOpponentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelSearchOpponentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelSearchOpponentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelSearchOpponentRequest(CancelSearchOpponentRequest other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelSearchOpponentRequest Clone() {
      return new CancelSearchOpponentRequest(this);
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelSearchOpponentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelSearchOpponentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelSearchOpponentRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelSearchOpponentRespons : pb::IMessage<CancelSearchOpponentRespons> {
    private static readonly pb::MessageParser<CancelSearchOpponentRespons> _parser = new pb::MessageParser<CancelSearchOpponentRespons>(() => new CancelSearchOpponentRespons());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelSearchOpponentRespons> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelSearchOpponentRespons() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelSearchOpponentRespons(CancelSearchOpponentRespons other) : this() {
      respons_ = other.respons_ != null ? other.respons_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelSearchOpponentRespons Clone() {
      return new CancelSearchOpponentRespons(this);
    }

    /// <summary>Field number for the "Respons" field.</summary>
    public const int ResponsFieldNumber = 1;
    private global::BoardGamesGrpc.SharedModel.ServerResponse respons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.SharedModel.ServerResponse Respons {
      get { return respons_; }
      set {
        respons_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelSearchOpponentRespons);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelSearchOpponentRespons other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Respons, other.Respons)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respons_ != null) hash ^= Respons.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respons_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Respons);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respons_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Respons);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelSearchOpponentRespons other) {
      if (other == null) {
        return;
      }
      if (other.respons_ != null) {
        if (respons_ == null) {
          Respons = new global::BoardGamesGrpc.SharedModel.ServerResponse();
        }
        Respons.MergeFrom(other.Respons);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (respons_ == null) {
              Respons = new global::BoardGamesGrpc.SharedModel.ServerResponse();
            }
            input.ReadMessage(Respons);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      color_ = other.color_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 3;
    private int color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Color != other.Color) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Color != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Color = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pawn : pb::IMessage<Pawn> {
    private static readonly pb::MessageParser<Pawn> _parser = new pb::MessageParser<Pawn>(() => new Pawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pawn(Pawn other) : this() {
      color_ = other.color_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pawn Clone() {
      return new Pawn(this);
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 1;
    private int color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Color != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Color);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pawn other) {
      if (other == null) {
        return;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Color = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Field : pb::IMessage<Field> {
    private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Field> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field(Field other) : this() {
      heigh_ = other.heigh_;
      width_ = other.width_;
      pawn_ = other.pawn_ != null ? other.pawn_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field Clone() {
      return new Field(this);
    }

    /// <summary>Field number for the "Heigh" field.</summary>
    public const int HeighFieldNumber = 1;
    private int heigh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heigh {
      get { return heigh_; }
      set {
        heigh_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 2;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Pawn" field.</summary>
    public const int PawnFieldNumber = 3;
    private global::BoardGamesGrpc.GameOnlines.Pawn pawn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.GameOnlines.Pawn Pawn {
      get { return pawn_; }
      set {
        pawn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Field);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Field other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Heigh != other.Heigh) return false;
      if (Width != other.Width) return false;
      if (!object.Equals(Pawn, other.Pawn)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Heigh != 0) hash ^= Heigh.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (pawn_ != null) hash ^= Pawn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Heigh != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Heigh);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Width);
      }
      if (pawn_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pawn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Heigh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heigh);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (pawn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pawn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Field other) {
      if (other == null) {
        return;
      }
      if (other.Heigh != 0) {
        Heigh = other.Heigh;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.pawn_ != null) {
        if (pawn_ == null) {
          Pawn = new global::BoardGamesGrpc.GameOnlines.Pawn();
        }
        Pawn.MergeFrom(other.Pawn);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Heigh = input.ReadInt32();
            break;
          }
          case 16: {
            Width = input.ReadInt32();
            break;
          }
          case 26: {
            if (pawn_ == null) {
              Pawn = new global::BoardGamesGrpc.GameOnlines.Pawn();
            }
            input.ReadMessage(Pawn);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Board : pb::IMessage<Board> {
    private static readonly pb::MessageParser<Board> _parser = new pb::MessageParser<Board>(() => new Board());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Board> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Board() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Board(Board other) : this() {
      maxHeight_ = other.maxHeight_;
      maxWidth_ = other.maxWidth_;
      minHeight_ = other.minHeight_;
      minWidth_ = other.minWidth_;
      fieldList_ = other.fieldList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Board Clone() {
      return new Board(this);
    }

    /// <summary>Field number for the "MaxHeight" field.</summary>
    public const int MaxHeightFieldNumber = 1;
    private int maxHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHeight {
      get { return maxHeight_; }
      set {
        maxHeight_ = value;
      }
    }

    /// <summary>Field number for the "MaxWidth" field.</summary>
    public const int MaxWidthFieldNumber = 2;
    private int maxWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxWidth {
      get { return maxWidth_; }
      set {
        maxWidth_ = value;
      }
    }

    /// <summary>Field number for the "MinHeight" field.</summary>
    public const int MinHeightFieldNumber = 3;
    private int minHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinHeight {
      get { return minHeight_; }
      set {
        minHeight_ = value;
      }
    }

    /// <summary>Field number for the "MinWidth" field.</summary>
    public const int MinWidthFieldNumber = 4;
    private int minWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinWidth {
      get { return minWidth_; }
      set {
        minWidth_ = value;
      }
    }

    /// <summary>Field number for the "FieldList" field.</summary>
    public const int FieldListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::BoardGamesGrpc.GameOnlines.Field> _repeated_fieldList_codec
        = pb::FieldCodec.ForMessage(42, global::BoardGamesGrpc.GameOnlines.Field.Parser);
    private readonly pbc::RepeatedField<global::BoardGamesGrpc.GameOnlines.Field> fieldList_ = new pbc::RepeatedField<global::BoardGamesGrpc.GameOnlines.Field>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BoardGamesGrpc.GameOnlines.Field> FieldList {
      get { return fieldList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Board);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Board other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxHeight != other.MaxHeight) return false;
      if (MaxWidth != other.MaxWidth) return false;
      if (MinHeight != other.MinHeight) return false;
      if (MinWidth != other.MinWidth) return false;
      if(!fieldList_.Equals(other.fieldList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxHeight != 0) hash ^= MaxHeight.GetHashCode();
      if (MaxWidth != 0) hash ^= MaxWidth.GetHashCode();
      if (MinHeight != 0) hash ^= MinHeight.GetHashCode();
      if (MinWidth != 0) hash ^= MinWidth.GetHashCode();
      hash ^= fieldList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxHeight != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxHeight);
      }
      if (MaxWidth != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxWidth);
      }
      if (MinHeight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinHeight);
      }
      if (MinWidth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinWidth);
      }
      fieldList_.WriteTo(output, _repeated_fieldList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHeight);
      }
      if (MaxWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxWidth);
      }
      if (MinHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinHeight);
      }
      if (MinWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinWidth);
      }
      size += fieldList_.CalculateSize(_repeated_fieldList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Board other) {
      if (other == null) {
        return;
      }
      if (other.MaxHeight != 0) {
        MaxHeight = other.MaxHeight;
      }
      if (other.MaxWidth != 0) {
        MaxWidth = other.MaxWidth;
      }
      if (other.MinHeight != 0) {
        MinHeight = other.MinHeight;
      }
      if (other.MinWidth != 0) {
        MinWidth = other.MinWidth;
      }
      fieldList_.Add(other.fieldList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxHeight = input.ReadInt32();
            break;
          }
          case 16: {
            MaxWidth = input.ReadInt32();
            break;
          }
          case 24: {
            MinHeight = input.ReadInt32();
            break;
          }
          case 32: {
            MinWidth = input.ReadInt32();
            break;
          }
          case 42: {
            fieldList_.AddEntriesFrom(input, _repeated_fieldList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchUser : pb::IMessage<MatchUser> {
    private static readonly pb::MessageParser<MatchUser> _parser = new pb::MessageParser<MatchUser>(() => new MatchUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchUser(MatchUser other) : this() {
      matchUserId_ = other.matchUserId_;
      matchId_ = other.matchId_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      matchResult_ = other.matchResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchUser Clone() {
      return new MatchUser(this);
    }

    /// <summary>Field number for the "MatchUserId" field.</summary>
    public const int MatchUserIdFieldNumber = 1;
    private int matchUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchUserId {
      get { return matchUserId_; }
      set {
        matchUserId_ = value;
      }
    }

    /// <summary>Field number for the "MatchId" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private int matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "User" field.</summary>
    public const int UserFieldNumber = 3;
    private global::BoardGamesGrpc.SharedModel.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.SharedModel.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "MatchResult" field.</summary>
    public const int MatchResultFieldNumber = 4;
    private global::BoardGamesGrpc.GameOnlines.MatchResults matchResult_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.GameOnlines.MatchResults MatchResult {
      get { return matchResult_; }
      set {
        matchResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchUserId != other.MatchUserId) return false;
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(User, other.User)) return false;
      if (MatchResult != other.MatchResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchUserId != 0) hash ^= MatchUserId.GetHashCode();
      if (MatchId != 0) hash ^= MatchId.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (MatchResult != 0) hash ^= MatchResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchUserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MatchUserId);
      }
      if (MatchId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MatchId);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
      if (MatchResult != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MatchResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchUserId);
      }
      if (MatchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchId);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (MatchResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchUser other) {
      if (other == null) {
        return;
      }
      if (other.MatchUserId != 0) {
        MatchUserId = other.MatchUserId;
      }
      if (other.MatchId != 0) {
        MatchId = other.MatchId;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::BoardGamesGrpc.SharedModel.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.MatchResult != 0) {
        MatchResult = other.MatchResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchUserId = input.ReadInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadInt32();
            break;
          }
          case 26: {
            if (user_ == null) {
              User = new global::BoardGamesGrpc.SharedModel.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 32: {
            MatchResult = (global::BoardGamesGrpc.GameOnlines.MatchResults) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Match : pb::IMessage<Match> {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      matchId_ = other.matchId_;
      gameType_ = other.gameType_;
      dateStart_ = other.dateStart_;
      dateEnd_ = other.dateEnd_;
      matchUsers_ = other.matchUsers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "MatchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private int matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "GameType" field.</summary>
    public const int GameTypeFieldNumber = 2;
    private int gameType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    /// <summary>Field number for the "DateStart" field.</summary>
    public const int DateStartFieldNumber = 3;
    private string dateStart_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateStart {
      get { return dateStart_; }
      set {
        dateStart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DateEnd" field.</summary>
    public const int DateEndFieldNumber = 4;
    private string dateEnd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateEnd {
      get { return dateEnd_; }
      set {
        dateEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MatchUsers" field.</summary>
    public const int MatchUsersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::BoardGamesGrpc.GameOnlines.MatchUser> _repeated_matchUsers_codec
        = pb::FieldCodec.ForMessage(42, global::BoardGamesGrpc.GameOnlines.MatchUser.Parser);
    private readonly pbc::RepeatedField<global::BoardGamesGrpc.GameOnlines.MatchUser> matchUsers_ = new pbc::RepeatedField<global::BoardGamesGrpc.GameOnlines.MatchUser>();
    /// <summary>
    ///google.protobuf.Timestamp DateStart = 3;
    ///google.protobuf.Timestamp DateEnd = 4;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BoardGamesGrpc.GameOnlines.MatchUser> MatchUsers {
      get { return matchUsers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (GameType != other.GameType) return false;
      if (DateStart != other.DateStart) return false;
      if (DateEnd != other.DateEnd) return false;
      if(!matchUsers_.Equals(other.matchUsers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0) hash ^= MatchId.GetHashCode();
      if (GameType != 0) hash ^= GameType.GetHashCode();
      if (DateStart.Length != 0) hash ^= DateStart.GetHashCode();
      if (DateEnd.Length != 0) hash ^= DateEnd.GetHashCode();
      hash ^= matchUsers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MatchId);
      }
      if (GameType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameType);
      }
      if (DateStart.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DateStart);
      }
      if (DateEnd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DateEnd);
      }
      matchUsers_.WriteTo(output, _repeated_matchUsers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchId);
      }
      if (GameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameType);
      }
      if (DateStart.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateStart);
      }
      if (DateEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateEnd);
      }
      size += matchUsers_.CalculateSize(_repeated_matchUsers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0) {
        MatchId = other.MatchId;
      }
      if (other.GameType != 0) {
        GameType = other.GameType;
      }
      if (other.DateStart.Length != 0) {
        DateStart = other.DateStart;
      }
      if (other.DateEnd.Length != 0) {
        DateEnd = other.DateEnd;
      }
      matchUsers_.Add(other.matchUsers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt32();
            break;
          }
          case 16: {
            GameType = input.ReadInt32();
            break;
          }
          case 26: {
            DateStart = input.ReadString();
            break;
          }
          case 34: {
            DateEnd = input.ReadString();
            break;
          }
          case 42: {
            matchUsers_.AddEntriesFrom(input, _repeated_matchUsers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Game : pb::IMessage<Game> {
    private static readonly pb::MessageParser<Game> _parser = new pb::MessageParser<Game>(() => new Game());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Game> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game(Game other) : this() {
      playerTurn_ = other.playerTurn_ != null ? other.playerTurn_.Clone() : null;
      playerList_ = other.playerList_.Clone();
      board_ = other.board_ != null ? other.board_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game Clone() {
      return new Game(this);
    }

    /// <summary>Field number for the "PlayerTurn" field.</summary>
    public const int PlayerTurnFieldNumber = 1;
    private global::BoardGamesGrpc.GameOnlines.Player playerTurn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.GameOnlines.Player PlayerTurn {
      get { return playerTurn_; }
      set {
        playerTurn_ = value;
      }
    }

    /// <summary>Field number for the "PlayerList" field.</summary>
    public const int PlayerListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::BoardGamesGrpc.GameOnlines.Player> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(18, global::BoardGamesGrpc.GameOnlines.Player.Parser);
    private readonly pbc::RepeatedField<global::BoardGamesGrpc.GameOnlines.Player> playerList_ = new pbc::RepeatedField<global::BoardGamesGrpc.GameOnlines.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BoardGamesGrpc.GameOnlines.Player> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "Board" field.</summary>
    public const int BoardFieldNumber = 3;
    private global::BoardGamesGrpc.GameOnlines.Board board_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.GameOnlines.Board Board {
      get { return board_; }
      set {
        board_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Game);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Game other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerTurn, other.PlayerTurn)) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      if (!object.Equals(Board, other.Board)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerTurn_ != null) hash ^= PlayerTurn.GetHashCode();
      hash ^= playerList_.GetHashCode();
      if (board_ != null) hash ^= Board.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerTurn_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerTurn);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
      if (board_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Board);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerTurn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerTurn);
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      if (board_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Board);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Game other) {
      if (other == null) {
        return;
      }
      if (other.playerTurn_ != null) {
        if (playerTurn_ == null) {
          PlayerTurn = new global::BoardGamesGrpc.GameOnlines.Player();
        }
        PlayerTurn.MergeFrom(other.PlayerTurn);
      }
      playerList_.Add(other.playerList_);
      if (other.board_ != null) {
        if (board_ == null) {
          Board = new global::BoardGamesGrpc.GameOnlines.Board();
        }
        Board.MergeFrom(other.Board);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerTurn_ == null) {
              PlayerTurn = new global::BoardGamesGrpc.GameOnlines.Player();
            }
            input.ReadMessage(PlayerTurn);
            break;
          }
          case 18: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 26: {
            if (board_ == null) {
              Board = new global::BoardGamesGrpc.GameOnlines.Board();
            }
            input.ReadMessage(Board);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GamePlay : pb::IMessage<GamePlay> {
    private static readonly pb::MessageParser<GamePlay> _parser = new pb::MessageParser<GamePlay>(() => new GamePlay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GamePlay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlay(GamePlay other) : this() {
      game_ = other.game_ != null ? other.game_.Clone() : null;
      match_ = other.match_ != null ? other.match_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlay Clone() {
      return new GamePlay(this);
    }

    /// <summary>Field number for the "Game" field.</summary>
    public const int GameFieldNumber = 1;
    private global::BoardGamesGrpc.GameOnlines.Game game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.GameOnlines.Game Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "Match" field.</summary>
    public const int MatchFieldNumber = 2;
    private global::BoardGamesGrpc.GameOnlines.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.GameOnlines.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GamePlay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GamePlay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Game, other.Game)) return false;
      if (!object.Equals(Match, other.Match)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (game_ != null) hash ^= Game.GetHashCode();
      if (match_ != null) hash ^= Match.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (game_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Game);
      }
      if (match_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (game_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GamePlay other) {
      if (other == null) {
        return;
      }
      if (other.game_ != null) {
        if (game_ == null) {
          Game = new global::BoardGamesGrpc.GameOnlines.Game();
        }
        Game.MergeFrom(other.Game);
      }
      if (other.match_ != null) {
        if (match_ == null) {
          Match = new global::BoardGamesGrpc.GameOnlines.Match();
        }
        Match.MergeFrom(other.Match);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (game_ == null) {
              Game = new global::BoardGamesGrpc.GameOnlines.Game();
            }
            input.ReadMessage(Game);
            break;
          }
          case 18: {
            if (match_ == null) {
              Match = new global::BoardGamesGrpc.GameOnlines.Match();
            }
            input.ReadMessage(Match);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayMatchRequest : pb::IMessage<PlayMatchRequest> {
    private static readonly pb::MessageParser<PlayMatchRequest> _parser = new pb::MessageParser<PlayMatchRequest>(() => new PlayMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BoardGamesGrpc.GameOnlines.GameOnlineReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayMatchRequest(PlayMatchRequest other) : this() {
      userId_ = other.userId_;
      gamePlay_ = other.gamePlay_ != null ? other.gamePlay_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayMatchRequest Clone() {
      return new PlayMatchRequest(this);
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "GamePlay" field.</summary>
    public const int GamePlayFieldNumber = 2;
    private global::BoardGamesGrpc.GameOnlines.GamePlay gamePlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BoardGamesGrpc.GameOnlines.GamePlay GamePlay {
      get { return gamePlay_; }
      set {
        gamePlay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(GamePlay, other.GamePlay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (gamePlay_ != null) hash ^= GamePlay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (gamePlay_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GamePlay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (gamePlay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GamePlay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.gamePlay_ != null) {
        if (gamePlay_ == null) {
          GamePlay = new global::BoardGamesGrpc.GameOnlines.GamePlay();
        }
        GamePlay.MergeFrom(other.GamePlay);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            if (gamePlay_ == null) {
              GamePlay = new global::BoardGamesGrpc.GameOnlines.GamePlay();
            }
            input.ReadMessage(GamePlay);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
